#!/bin/bash
# **********************************************************************
#
# Copyright (c) 2008-2016 ZeroC, Inc. All rights reserved.
#
# **********************************************************************
set -eo pipefail

readonly ICE_BUILDER_XCODE_VERSION=3.0.2

calledFromXcode() {
    if [[ -z $XCODE_PRODUCT_BUILD_VERSION || -z $DERIVED_FILE_DIR || -z $INPUT_FILE_PATH ]]; then
        return 1
    fi
    return 0
}

# Ice Builder for Xcode 3 (this) should not be used along side of Ice Builder for Xcode 2 (plug-in)
checkOldIceBuilder() {
    # These plug-ins will not load on Xcode 8, so just skip this check
    if [ "$XCODE_VERSION_MAJOR" = "0800" ]; then
        return
    fi

    local plugins=(
        "$HOME/Library/Application Support/Developer/Shared/Xcode/Plug-ins/IceBuilder.xcplugin"
        "/Library/Developer/IceTouch-1.3/Xcode/slice2objcplugin.pbplugin"
    )
    local foundPlugin=0
    for plugin in "${plugins[@]}"; do
        if [ -d "$plugin" ]; then

            # Check for Ice Touch installed slice2objcplugin.pbplugin plug-in symlinks. Just remove these.
            if [ "$(basename "$plugin")" = "slice2objcplugin.pbplugin" ] && \
               [ -d "/Library/Application Support/Developer" ]; then
               local symlinks=$(find "/Library/Application Support/Developer" -name "slice2objcplugin.pbplugin")
               if [ "${symlinks}" != "" ]; then
                    find "/Library/Application Support/Developer" -name "slice2objcplugin.pbplugin" \
                        -exec echo "Incompatible Ice Builder plug-in detected: '{}'" \;
                    foundPlugin=1
                fi
            else
                echo "Incompatible Ice Builder plug-in detected: '$plugin'"
                foundPlugin=1
            fi
        fi
    done
    return $foundPlugin
}

# Run slice sliceCompiler. We always include Ice slice file directory as well as the INPUT_FILE_DIR.
compileSliceFile() {
    logDebug "Compiling slice file: $INPUT_FILE_NAME"
    set -x # print the executed slice compiler command
    $sliceCompiler -I"$INPUT_FILE_DIR" \
                   -I"$sliceDir" \
                   --output-dir "$outputDir" \
                   "${sliceCompilerArguments[@]}" \
                   "$INPUT_FILE_PATH"
}

# Output directory is detected by comparing the SCRIPT_OUTPUT_FILE_{0,1} variables.
# These are expected to the be the destination of the slice compiler generated header
# and source files. Both files must share the same base directory, as this is how we
# determine the output directory to pass to the slice compiler.
setOutputDir() {
    if [ "$SCRIPT_OUTPUT_FILE_COUNT" -ne 2 ]; then
        echo "Please specify a header and source output file."
        return 1
    fi

    local -r outputFile0=${SCRIPT_OUTPUT_FILE_0}
    logDebug "Output file 0: $outputFile0"
    local -r outputFile1=${SCRIPT_OUTPUT_FILE_1}
    logDebug "Output file 1: $outputFile1"

    local -r outputFileDir0=$(dirname "$outputFile0")
    local -r outputFileDir1=$(dirname "$outputFile1")

    if [ "$outputFileDir0" != "$outputFileDir1" ]; then
        echo "Output files must be in the same directory."
        return 1
    fi

    outputDir="$outputFileDir0"
}

main() {
    if ! calledFromXcode; then
        logError "Ice Builder for Xcode must be executed from an Xcode environment."
        exit 0
    fi

    if ! checkOldIceBuilder; then
        echo "Incompatible Ice Builder plug-in(s) detected. Please remove the plug-in(s) listed above."
        exit 1
    fi

    if ! setOutputDir; then
        exit 1
    fi

    if ! findIceSDK; then
        logError "Unable to find an Ice or Ice Touch SDK. An Ice or Ice Touch SDK must be added to the list of 'Additional SDKs'."
        exit 1
    fi

    logDebug "Ice SDK (absolute path): $iceSDK"

    readonly iceVersion=$("$sliceCompiler" -v 2>&1)
    logDebug "Ice version: $iceVersion"

    # Compile Slice file
    compileSliceFile
}

logDebug() {
    [ -z "$DEBUG" ] || echo "$*"
}

logError() {
    echo "$*" >&2
}

findIceSDK() {
    for sdk in $ADDITIONAL_SDK_DIRS; do
        local -r sdkDir=$(dirname "$sdk")
        if [[ "$sdk" =~ "IceTouch" ]] || [[ "$sdk" =~ "IceSDK" ]]; then
            iceSDK="$sdk"
            sliceDir="${sdkDir}/slice"                          # Slice file directory included the SDK
            sliceCompiler="${sdkDir}/bin/slice2${language}"     # Either 'slice2cpp' or 'slice2objc'
            if ! validateSDK; then
                logError "Unable to validate Ice SDK."
                continue # Keep looking
            fi
            return 0
        else
            continue
        fi
    done
    # Unable to find sdk
    return 1
}

printUsage() {
    cat <<EOF
Usage: $(basename "$0") [options] [-- <slice compiler flags>]
Options:
--cpp           Use slice2cpp. Default is slice2objc.
-h, --help      Show this message.
-v, --version   Display Ice Builder for Xcode version.
-- ARGS         Pass agruments directly to the slice compiler.
EOF
}

validateSDK() {
    logDebug "Slice file directory: $sliceDir"
    if [ ! -d "$sliceDir" ]; then
        logError "Ice SDK slice files can not be found: $sliceDir"
        return 1
    fi

    logDebug "Slice compiler: $sliceCompiler"
    if [ ! -e "$sliceCompiler" ]; then
        logError "Slice compiler '$sliceCompiler' does not exist"
        return 1
    fi
}

versionGt() {
    test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1";
}

#
# Process arguments and run slice compiler
#
logDebug "Ice Builder for Xcode version: $ICE_BUILDER_XCODE_VERSION"

sliceCompilerArguments=()
language=objc

while [[ $# -gt 0 ]]; do
    opt="$1"
    case $opt in
        --cpp)
            language=cpp
            ;;
        -h|--help)
            printUsage
            exit
            ;;
        -v|--version)
            echo "$ICE_BUILDER_XCODE_VERSION"
            exit
            ;;
        --)
            shift
            sliceCompilerArguments=("$@")
            break
            ;;
        *)
            logError "Unknown option: '$opt'"
            exit 1
        ;;
    esac
    shift
done

main
